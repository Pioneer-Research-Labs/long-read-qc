#!/usr/bin/env nextflow

def helpMessage() {
    log.info """
Usage: nextflow run Pioneer-Research-Labs/long-read-qc -latest

Options:
--samplesheet <file>      Path to the sample sheet (default: samplesheet.csv)
--outdir <dir>            Output directory (default: results)
--tech <str>              Sequencing technology, map-ont/map-pb/map-hifi (default: map-ont)
--error_rate <float>      Error rate for barcode searching (default: 0.1)
--min_overlap <int>       Minimum overlap for barcode searching (default: 3)
--min_bc_len <int>        Minimum barcode length (default: 20)
--max_bc_len <int>        Maximum barcode length (default: 60)
--meta_ovlp <int>         Overlap bp for sourmash (default: 1000)
--sourmash_db <file>      Path to the sourmash database (default: /srv/shared/databases/sourmash/gtdb-rs220-k21.zip)
--taxonomy <file>         Path to the taxonomy database (default: /srv/shared/databases/sourmash/gtdb-rs220.lineages.sqldb)
--cores <int>             Number of cores to use (default: 4)

"""
}


// Run the workflow

workflow {

    log.info """
▗▄▄▖▗▄▄▄▖ ▗▄▖ ▗▖  ▗▖▗▄▄▄▖▗▄▄▄▖▗▄▄▖     ▗▄▄▖▗▄▄▄▖▗▄▄▖ ▗▄▄▄▖▗▖   ▗▄▄▄▖▗▖  ▗▖▗▄▄▄▖ ▗▄▄▖
▐▌ ▐▌ █  ▐▌ ▐▌▐▛▚▖▐▌▐▌   ▐▌   ▐▌ ▐▌    ▐▌ ▐▌ █  ▐▌ ▐▌▐▌   ▐▌     █  ▐▛▚▖▐▌▐▌   ▐▌
▐▛▀▘  █  ▐▌ ▐▌▐▌ ▝▜▌▐▛▀▀▘▐▛▀▀▘▐▛▀▚▖    ▐▛▀▘  █  ▐▛▀▘ ▐▛▀▀▘▐▌     █  ▐▌ ▝▜▌▐▛▀▀▘ ▝▀▚▖
▐▌  ▗▄█▄▖▝▚▄▞▘▐▌  ▐▌▐▙▄▄▖▐▙▄▄▖▐▌ ▐▌    ▐▌  ▗▄█▄▖▐▌   ▐▙▄▄▖▐▙▄▄▖▗▄█▄▖▐▌  ▐▌▐▙▄▄▖▗▄▄▞▘

Long Read Processing and QC Pipeline          
"""    

 // Show help message

    if (params.help) {
        helpMessage()
        exit 0
    }

    channel.fromPath(params.samplesheet)
        .splitCsv(header:true)
        .map { row -> 
            meta = [id:row.id, genome:row.genome]
            [meta, file(row.file), file(params.constructs + row.construct)]
    
        }.view()
        | set {input_ch}

    channel.fromPath(params.samplesheet)
        .splitCsv(header:true)
        .map { row -> 
            meta = [id:row.id, genome:row.genome]
            [meta, file(params.constructs + row.construct)]

        }.view()
        | set {constructs}


    // Generate quality report using fastplong
    quality_report(input_ch)

    // This type of pattern collects the results of all the sequences being processed, creates a temp file
    // and then returns the path to the temp file. This is useful for collecting results from multiple processes
    // and we do so here since we are collecting the results of the mapping process in a summary table and/or plot.
    // The vector map is a file that maps the sample to the path of the mapped vector results. The temp files
    // generated by this method are found in the work/tmp directory.
    vector_map = map_vector(input_ch).collectFile(){
        meta, bam, bai, stats ->
        ["mapped_vector_map.tsv", "${meta.id}\t${params.path_prefix}${stats}\n"]
    }

    // get the flanking sequences from the .dna file
    flanking = get_flanks(constructs)

    joinChannel = input_ch.join(flanking)


    // extract barcodes and inserts
   (barcodes, bc_report, bc_tab) = extract_barcodes(joinChannel)
   (inserts, ins_report, in_tab) = extract_inserts(joinChannel)

    // combine for read stats
    combined_data = input_ch
        .join(inserts)
        .join(barcodes)


    // The seq stats map is a file that maps the sample to the path of the seq stats results file for each sample.
    seq_stats_results = seq_stats(combined_data).collectFile(){
        id, tsv ->
        ["seq_stats_map.tsv", "${id}\t${params.path_prefix}${tsv}\n"]
        }

    // The sample map is a file that maps the sample to the path of the barcode count file for each sample.
    barcode_count_sample_map = barcode_counts(barcodes).collectFile(){ id, tsv ->
        ["sample_map.tsv", "${id}\t${params.path_prefix}${tsv}\n"]
    }

    // The barcode map is a file that maps the sample to the path of the barcode file for each sample.
    barcode_map =  get_barcodes_as_tsv(barcodes).collectFile(){ meta, fasta ->
        ["barcode_map.tsv", "${meta.id}\t${params.path_prefix}${fasta}\n"]
    }

    // The insert map is a file that maps the sample to the path of the insert file for each sample.
    insert_map =  get_inserts_as_tsv(inserts).collectFile(){ meta, fasta ->
        ["insert_map.tsv", "${meta.id}\t${params.path_prefix}${fasta}\n"]
    }

    //split based on single genome or metagenome mode
    splits = inserts.branch { meta2, path ->
        single: meta2.genome != 'meta'
            [meta2, path]
        multi: meta2.genome == 'meta'
            [meta2, path]
    }
    
    // mapping inserts and add the dynamically generated path to the contigs.fna file, adding it to the channel
    mapped = map_inserts(splits.single | map { 
	meta, seq_path -> [meta, seq_path, "${params.genomes}/${meta.genome}/${meta.genome}_contigs.fna".toString()] 
	})

    // Add the files needed for insert coverage by dynamically creating paths based on genome.
    mapped_with_references = mapped | map {
	meta, bam, bai, stats -> [ 
		meta, bam,  bai, stats , "${params.genomes}/${meta.genome}/${meta.genome}_genes.gff".toString(),
		"${params.genomes}/${meta.genome}/${meta.genome}_genes.bed".toString()]
	}

    // get insert coverage and collect the results into a file that maps the sample to the location of
    // the insert coverage output.
    insert_outputs = insert_coverage(mapped_with_references 
			).collectFile(){
            meta, gene_cov, insert_cov, genome_cov, genome_cov_stats, insert_cov_full, insert_intersect, depth ->
        ["insert_coverage.tsv", "${meta.id}\t${params.path_prefix}${insert_cov_full}\n"]
    }


   // Here we generate various summary files and plots for all the sequences processed
   summarize_barcode_counts(barcode_count_sample_map)
   summarize_inserts(insert_map)
   summarize_barcodes(barcode_map)
   generate_seq_summary(seq_stats_results, barcode_map, vector_map, insert_map)
   summarize_insert_coverage(insert_outputs)

   // Plot coverage depth
   plot_depth(mapped)

    // metagenomic samples
    sketched = sketch(splits.multi)
    classified = classify(sketched, params.sourmash_db)
    taxonomy(classified, params.taxonomy)


    // report
    report = channel.fromPath("${projectDir}/assets/report_template.ipynb")
    report_utils = channel.fromPath("${projectDir}/assets/report_utils_template.py")

    prepare_report(report, report_utils)

    channel.fromPath(params.samplesheet) | samples

}


// Processes

process get_flanks {
    publishDir("$params.localdir/$meta.id"),  mode: 'copy'
    publishDir("$params.outdir/$meta.id"),  mode: 'copy'
    tag ("$meta.id")

    input:
    tuple val(meta), path(construct)

    output:
    tuple val(meta), path("flanking.gb")

    script:
    """
    echo $meta.id
    get_flanking.py $construct
    """
}

process rotate_reads {
    publishDir("$params.localdir/$meta.id"),  mode: 'copy'
    publishDir("$params.outdir/$meta.id"),  mode: 'copy'
    tag "$meta.id"

    input:
    tuple val(meta), path(reads)
    
    output:
    tuple val(meta), path("reads_rotated.fasta")

    script:
    """
    seqkit fq2fa $reads | rotate -s $params.rotate_anchor -m 4 - | \
         seqkit replace -p .+ -r "read_{nr}" > reads_rotated.fasta
    """
}

process map_vector {
    publishDir("$params.localdir/$meta.id"),  mode: 'copy'
    publishDir("$params.outdir/$meta.id"),  mode: 'copy'
    tag "$meta.id"

    cpus params.cores

    input:
    tuple val(meta), path(reads), path(construct)

    output:
    tuple val(meta), path('mapped_vector.bam'), path("mapped_vector.bam.bai"), path("mapped_vector_stats.tsv")

    script:
    """
    echo $construct
    convert_dna.py $construct | \
        minimap2 -ax $params.tech -t $task.cpus --secondary=no - $reads | samtools view -@ $task.cpus -b - | samtools sort - -@ $task.cpus -o 'mapped_vector.bam'
    samtools index -@ $task.cpus mapped_vector.bam
    samtools flagstat -@ $task.cpus -O tsv mapped_vector.bam > mapped_vector_stats.tsv
    """

}

process seq_stats {
       
    publishDir("$params.localdir/$meta.id"),  mode: 'copy'
    publishDir("$params.outdir/$meta.id"),  mode: 'copy'


    tag "$meta.id"

    cpus params.cores

    input:
    tuple val(meta), path(raw), path(construct), path(ins_seqs), path(bc_seqs)
    
    //path(rotated), 
    
    output:
    tuple val("$meta.id"), path ('seq_stats.tsv')

    script:
    """
    seqkit stats -j $task.cpus -T $raw $ins_seqs $bc_seqs > seq_stats.tsv
    """
}

process extract_barcodes {
    publishDir "$params.localdir/$meta.id",  mode: 'copy'
    publishDir "$params.outdir/$meta.id",  mode: 'copy'
    tag("$meta.id")

    cpus params.cores

    input:
    tuple val(meta), path(reads), path(construct), path(flanking)

    output:
    tuple val(meta), path("barcodes.fasta")
    path "cutadapt_barcode_report.json"

    script:
    """
    cutadapt \
        -g \$(bc_template.py $flanking cutadapt_barcode) \
        --discard-untrimmed \
        --revcomp \
        -e $params.error_rate \
        -O $params.min_overlap \
        -o barcodes_raw.fasta \
        -j $task.cpus \
        --json cutadapt_barcode_report.json \
        $reads
    seqkit seq -j $task.cpus --min-len $params.min_bc_len --max-len $params.max_bc_len \
        barcodes_raw.fasta > barcodes.fasta
        
    """
}

process get_barcodes_as_tsv{
    publishDir "$params.localdir/$meta.id",  mode: 'copy'
    publishDir "$params.outdir/$meta.id",  mode: 'copy'
    tag("$meta.id")

    input:
    tuple val(meta), path(barcodes)

    output:
    tuple val(meta), path ("barcodes.tsv")

    script:
    """
    seqkit fx2tab -li $barcodes > barcodes.tsv
    """

}

process filter_barcodes {
    publishDir "$params.localdir/$meta.id",  mode: 'copy'
    publishDir "$params.outdir/$meta.id",  mode: 'copy'
    tag("$meta.id")

    cpus params.cores

    input:
    tuple val(meta), path(barcodes)

    output:
    tuple val(meta), path("barcodes_filtered.fasta")

    script:
    """
    seqkit seq -j $task.cpus --min-len $params.min_bc_len --max-len $params.max_bc_len \
        $barcodes > barcodes_filtered.fasta
    """
}

process barcode_counts {

    publishDir("$params.localdir/$meta.id"),  mode: 'copy'
    publishDir("$params.outdir/$meta.id"),  mode: 'copy'
    tag("$meta.id")

    cpus params.cores

    input:
    tuple val(meta), path(barcodes)

    output:
    tuple val("$meta.id"), path('barcode_counts.tsv')

    script:
    """
     seqkit fx2tab -j $task.cpus -i $barcodes | cut -f2 | sort | uniq -c | \
        awk '{print \$2"\t"\$1}' > barcode_counts.tsv
    """
}

process extract_inserts {
    publishDir "$params.localdir/$meta.id",  mode: 'copy'
    publishDir "$params.outdir/$meta.id",  mode: 'copy'
    tag("$meta.id")

    cpus params.cores

    input:
    tuple val(meta), path(reads), path(construct), path(flanking)

    output:
    tuple val(meta), path("inserts.fasta")
    path "cutadapt_inserts_report.json"


    script:
    """
    cutadapt \
        -g \$(bc_template.py $flanking cutadapt_insert) \
        --discard-untrimmed \
        --revcomp \
        -e $params.error_rate \
        -O $params.min_overlap \
        -o inserts_cutadapt.fasta \
        -j $task.cpus \
        --json cutadapt_inserts_report.json \
        $reads
    seqkit seq --min-len 1 inserts_cutadapt.fasta > inserts.fasta
    """
}

process get_inserts_as_tsv {
    publishDir "$params.localdir/$meta.id",  mode: 'copy'
    publishDir "$params.outdir/$meta.id",  mode: 'copy'
    tag("$meta.id")

    input:
    tuple val(meta), path(insert_fasta)

    output:
    tuple val(meta), path("inserts.tsv")

    script:
    """
    seqkit fx2tab -li $insert_fasta > inserts.tsv
    """
}
// Insert mapping

process map_inserts {

    publishDir("$params.localdir/$meta.id"),  mode: 'copy'
    publishDir("$params.outdir/$meta.id"),  mode: 'copy'
    tag "$meta.id"

    cpus params.cores

    input:
    tuple val(meta), path(ins_seqs), path(fna)

    output:
    tuple val(meta), path('mapped_inserts.bam'), path("mapped_inserts.bam.bai"), path('mapped_insert_stats.tsv')

    script:
    """

    minimap2 -ax $params.tech -t $task.cpus $fna $ins_seqs | samtools view -@ $task.cpus -b - | samtools sort - -@ $task.cpus -o mapped_inserts.bam
    samtools index -@ $task.cpus mapped_inserts.bam
    samtools flagstats -@ $task.cpus -O tsv mapped_inserts.bam > mapped_insert_stats.tsv
    """

}


process insert_coverage {

    publishDir("$params.localdir/$meta.id"),  mode: 'copy'
    publishDir("$params.outdir/$meta.id"),  mode: 'copy'
    tag "$meta.id"

    input:
    tuple val(meta), path(bam), path(index), path(stats), path(gff), path(bed)

    output:
    tuple val(meta), path('gene_coverage.bed'), path('insert_coverage.bed'), 
        path('genome_coverage.tsv'), path('genome_cov_stats.tsv'), path("insert_coverage_full.bed"),
        path('insert_intersect.out'), path('depth_report.tsv')
    script:
    """

    bedtools coverage -a $gff -b $bam > gene_coverage.bed
    bedtools coverage -b $gff -a <(bedtools bamtobed -i $bam) > insert_coverage.bed
    bedtools coverage -b $gff -a <(bedtools bamtobed -i $bam) -F 1 > insert_coverage_full.bed
    bedtools intersect -a <(bedtools bamtobed -i $bam) -b $bed  -wao > insert_intersect.out 
    bedtools genomecov -ibam $bam -dz > genome_coverage.tsv
    samtools coverage $bam > genome_cov_stats.tsv
    samtools depth -a $bam > depth_report.tsv
    """

}

process prepare_report {

    publishDir("$params.localdir"),  mode: 'copy'
    publishDir("$params.outdir"),  mode: 'copy'
    tag 'Preparing report'

    input:
    path report
    path report_utils

    output:
    path 'report.ipynb'
    path 'report_utils.py'

    script:
    """
    cp $report 'report.ipynb'
    cp $report_utils 'report_utils.py'
    """
}

process samples {

    publishDir("$params.localdir"),  mode: 'copy'
    publishDir("$params.outdir"),  mode: 'copy'
    tag 'Moving sample sheet'

    input:
    path samplesheet

    output:
    path 'samples.csv'

    script:
    """
    cp $samplesheet 'samples.csv'
    """
}




// --- Metagenomics

process sketch {
    
    publishDir("$params.localdir/$meta.id"),  mode: 'copy'
    publishDir("$params.outdir/$meta.id"),  mode: 'copy'
    tag "$meta.id"
    
    input:
    tuple val(meta), path(ins_seqs)

    output:
    tuple val(meta), path('inserts.sig.gz')

    script:
    """
    sourmash sketch dna -p k=21,abund $ins_seqs -o inserts.sig.gz --name inserts
    """
}

process classify {
    
    publishDir("$params.localdir/$meta.id"),  mode: 'copy'
    publishDir("$params.outdir/$meta.id"),  mode: 'copy'
    tag "$meta.id"

    cpus params.cores

    input:
    tuple val(meta), path(insert_sig)
    path sourmash_db
  
    output:
    tuple val(meta), path('insert_matches.csv')
  
    script:
    """
    sourmash scripts fastgather -o insert_matches.csv -c $task.cpus -t $params.meta_ovlp -k 21 \
        inserts.sig.gz $sourmash_db
    """
}

process taxonomy {
    publishDir("$params.localdir/$meta.id"),  mode: 'copy'
    publishDir("$params.outdir/$meta.id"),  mode: 'copy'
    tag "$meta.id"

    memory '32 GB'
    input:
    tuple val(meta), path(insert_matches)
    path taxonomy

    output:
    tuple val(meta), path('insert_taxonomy.csv')

    script:
    """
     sourmash tax metagenome -g $insert_matches -t $taxonomy -F csv_summary > insert_taxonomy.csv
    """

}

process quality_report {

    publishDir("$params.localdir/$meta.id"),  mode: 'copy'
    publishDir("$params.outdir/$meta.id"),  mode: 'copy'
    tag "$meta.id"

    input:
    tuple val(meta), path(reads), path(construct)

    output:
    tuple val(meta), path('fastplong.html'), path('fastplong.fq')

    script:
    """
    fastplong -i $reads -o fastplong.fq  -A -Q -L
    """
}


process plot_depth{
    publishDir("$params.localdir/$meta.id") ,  mode: 'copy'
    publishDir("$params.outdir/$meta.id") ,  mode: 'copy'
    tag "$meta.id"

    input:
    tuple val(meta), path(bam), path(bam_index),  path(insert_stats)

    output:
    tuple val(meta), path('coverage_plot.png')

    script:
    """
    samtools depth -a $bam > depth_report.tsv
    plot_coverage.py depth_report.tsv coverage_plot.png $meta.id
    """
}

process summarize_barcodes {
    publishDir("$params.localdir"),  mode: 'copy'
    publishDir("$params.outdir"),  mode: 'copy'
    tag 'Summarizing barcodes'

    input:
    path sample_map


    output:
        path ('*.csv', arity: '4')
        path('*.png', arity: '3')


    script:
    """
    summarize_and_plot.py $sample_map barcode
    """
}

process summarize_barcode_counts{

    publishDir("$params.localdir"),  mode: 'copy'
    publishDir("$params.outdir"),  mode: 'copy'
    tag 'Summarizing barcode counts'

    input:
    path sample_map


    output:
    path 'concatenated_barcode_counts.csv'

    script:
    """
    summarize_and_plot.py $sample_map barcode_counts
    """
}

process summarize_insert_coverage{
    publishDir("$params.localdir"),  mode: 'copy'
    publishDir("$params.outdir"),  mode: 'copy'
    tag 'Summarizing insert coverage'

    input:
    path insert_coverage_map


    output:
        path ('*.csv', arity: '3')
        path('*.png', arity: '2')


    script:
    """
    summarize_and_plot.py $insert_coverage_map insert_coverage
    """
}

process summarize_inserts{
    publishDir("$params.localdir"),  mode: 'copy'
    publishDir("$params.outdir"),  mode: 'copy'
    tag 'Summarizing inserts'

    input:
    path insert_map

    output:
        path 'concatenated_inserts.csv'
        path 'insert_length_distribution.csv'
        path 'insert_length_distribution.png'

    script:
    """
    summarize_and_plot.py $insert_map insert
    """
}

process generate_seq_summary{
    publishDir("$params.localdir"),  mode: 'copy'
    publishDir("$params.outdir"),  mode: 'copy'
    tag 'Summarizing sequence stats'

    input:
    path seq_stats_map
    path barcode_map
    path vector_map
    path insert_map

    output:
        path 'seq_summary.csv'
        path 'concatenated_seq_stats.csv'
        path 'concatenated_vector_map_stats.csv'

    script:
    """
    summarize_and_plot.py $seq_stats_map seq_stat $barcode_map $vector_map $insert_map
    """
}

